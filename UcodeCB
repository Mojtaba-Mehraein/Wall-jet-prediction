import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from catboost import CatBoostRegressor, Pool

# -------------------------
# Load Data
# -------------------------
data = pd.read_csv("Udata.csv")
X = data.iloc[:, 0:5].values   # Features: X, Y, TWR, ER, Re
y = data.iloc[:, 5].values     # Label: U

# Split data (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# -------------------------
# Train CatBoost Model
# -------------------------
model = CatBoostRegressor(
    depth=3,               # Tree depth
    learning_rate=0.1,     # Learning rate
    l2_leaf_reg=2,         # L2 regularization
    iterations=100,        # Number of boosting iterations
    silent=True,           # Suppress output
    random_seed=42
)

model.fit(X_train, y_train)

# -------------------------
# Predictions
# -------------------------
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# -------------------------
# Evaluation
# -------------------------
mse_train = mean_squared_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)

mse_test = mean_squared_error(y_test, y_test_pred)
r2_test = r2_score(y_test, y_test_pred)

print("\nModel Performance (CatBoost without optimization):")
print(f"Train -> MSE: {mse_train:.4f}, R²: {r2_train:.4f}")
print(f"Test  -> MSE: {mse_test:.4f}, R²: {r2_test:.4f}")

# -------------------------
# Plot 1: Predicted vs. Observed (Train & Test)
# -------------------------
plt.figure(figsize=(6, 6))

# Training data (blue circles)
plt.scatter(y_train, y_train_pred, c='blue', marker='o', alpha=0.6, label=f'Train (R²={r2_train:.2f})')

# Testing data (red triangles)
plt.scatter(y_test, y_test_pred, c='red', marker='^', alpha=0.7, label=f'Test (R²={r2_test:.2f})')

# 1:1 reference line
min_val = min(y.min(), min(y_train_pred.min(), y_test_pred.min()))
max_val = max(y.max(), max(y_train_pred.max(), y_test_pred.max()))
plt.plot([min_val, max_val], [min_val, max_val], 'k--', lw=2)

plt.xlabel("Observed U")
plt.ylabel("Predicted U")
plt.title("Predicted vs Observed (CatBoost)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

